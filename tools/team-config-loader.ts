/**
 * @aegisFrameworkVersion 2.4.0
 * @intent Centralized team configuration loader for framework tools
 * @context Enable all tools to respect team-specific feature configuration
 * @mode: strict
 */

import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';
import { 
  AegisFrameworkConfigSchema, 
  type AegisFrameworkConfig 
} from '../framework/contracts/team-configuration.schema.js';

export class TeamConfigLoader {
  private static instances: Map<string, TeamConfigLoader> = new Map();
  private config: AegisFrameworkConfig | null = null;
  private configPath: string;
  private lastLoadTime: number = 0;
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

  private constructor(workspaceRoot: string = process.cwd()) {
    this.configPath = path.join(workspaceRoot, '.framework', 'team-config.yaml');
  }

  static getInstance(workspaceRoot: string = process.cwd()): TeamConfigLoader {
    const key = workspaceRoot;
    if (!TeamConfigLoader.instances.has(key)) {
      TeamConfigLoader.instances.set(key, new TeamConfigLoader(workspaceRoot));
    }
    return TeamConfigLoader.instances.get(key)!;
  }

  /**
   * Load team configuration with caching
   */
  loadConfig(): AegisFrameworkConfig | null {
    const now = Date.now();
    
    // Return cached config if still valid
    if (this.config && (now - this.lastLoadTime) < this.CACHE_DURATION) {
      return this.config;
    }

    // Load fresh configuration
    if (!fs.existsSync(this.configPath)) {
      this.config = null;
      this.lastLoadTime = now;
      return null;
    }

    try {
      const content = fs.readFileSync(this.configPath, 'utf8');
      const data = yaml.load(content);
      this.config = AegisFrameworkConfigSchema.parse(data);
      this.lastLoadTime = now;
      return this.config;
    } catch (error) {
      console.warn('Failed to load team configuration:', error);
      this.config = null;
      this.lastLoadTime = now;
      return null;
    }
  }

  /**
   * Check if a required feature is enabled
   */
  isRequiredFeatureEnabled(feature: keyof AegisFrameworkConfig['required']): boolean {
    const config = this.loadConfig();
    if (!config) {
      // Default to enabled if no configuration exists
      return true;
    }

    switch (feature) {
      case 'evolutionStoryDetection':
        return config.required.evolutionStoryDetection.enabled;
      case 'constitutionalEnforcement':
        return config.required.constitutionalEnforcement.blocking;
      case 'precommitHooks':
        return config.required.precommitHooks.enabled;
      case 'annotations':
        return config.required.annotations.required;
      case 'templateQuality':
        return config.required.templateQuality.validation;
      default:
        return true;
    }
  }

  /**
   * Check if an optional feature is enabled
   */
  isOptionalFeatureEnabled(feature: keyof AegisFrameworkConfig['optional']): boolean {
    const config = this.loadConfig();
    if (!config) {
      // Default to disabled if no configuration exists
      return false;
    }

    switch (feature) {
      case 'realtimePatternDetection':
        return config.optional.realtimePatternDetection.enabled;
      case 'autoGeneratedEvolutionStories':
        return config.optional.autoGeneratedEvolutionStories.enabled;
      case 'driftMonitoringDashboard':
        return config.optional.driftMonitoringDashboard.enabled;
      case 'automatedChangelog':
        return config.optional.automatedChangelog.enabled;
      case 'predictiveEnforcement':
        return config.optional.predictiveEnforcement.enabled;
      default:
        return false;
    }
  }

  /**
   * Get constitutional enforcement mode
   */
  getConstitutionalMode(): 'strict' | 'guided' | 'advisory' {
    const config = this.loadConfig();
    if (!config) {
      return 'guided'; // Default mode
    }
    return config.required.constitutionalEnforcement.mode;
  }

  /**
   * Get annotation enforcement level
   */
  getAnnotationEnforcement(): 'warning' | 'error' | 'silent' {
    const config = this.loadConfig();
    if (!config) {
      return 'warning'; // Default enforcement
    }
    return config.required.annotations.enforcement;
  }

  /**
   * Check if configuration has active overrides
   */
  hasActiveOverrides(): boolean {
    const config = this.loadConfig();
    if (!config?.overrides) {
      return false;
    }

    // Check if override has expired
    const expiry = new Date(config.overrides.overrideExpiry);
    const now = new Date();
    return expiry > now;
  }

  /**
   * Get team profile information
   */
  getTeamProfile(): { name: string; profile: string } | null {
    const config = this.loadConfig();
    if (!config) {
      return null;
    }

    return {
      name: config.team.name,
      profile: config.team.profile
    };
  }

  /**
   * Force reload configuration (bypass cache)
   */
  reloadConfig(): AegisFrameworkConfig | null {
    this.config = null;
    this.lastLoadTime = 0;
    return this.loadConfig();
  }
}

// Convenience functions for tools
export const getTeamConfig = () => TeamConfigLoader.getInstance().loadConfig();
export const isFeatureEnabled = (feature: string) => {
  const loader = TeamConfigLoader.getInstance();
  
  // Check required features first
  if (feature in ['evolutionStoryDetection', 'constitutionalEnforcement', 'precommitHooks', 'annotations', 'templateQuality']) {
    return loader.isRequiredFeatureEnabled(feature as keyof AegisFrameworkConfig['required']);
  }
  
  // Check optional features
  if (feature in ['realtimePatternDetection', 'autoGeneratedEvolutionStories', 'driftMonitoringDashboard', 'automatedChangelog', 'predictiveEnforcement']) {
    return loader.isOptionalFeatureEnabled(feature as keyof AegisFrameworkConfig['optional']);
  }
  
  return false;
};
