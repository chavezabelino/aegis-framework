name: Fast CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  fast-validation:
    runs-on: ubuntu-latest
    name: Quick Validation
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm install
      
    - name: Version consistency check
      run: |
        echo "üîç Checking version consistency..."
        VERSION=$(cat VERSION)
        echo "Framework version: $VERSION"
        
        # Quick version annotation check
        if ! grep -q "@aegisFrameworkVersion.*$VERSION" framework/framework-core-v${VERSION}.md 2>/dev/null; then
          echo "‚ùå Version annotation mismatch"
          exit 1
        fi
        echo "‚úÖ Version consistency verified"
        
    - name: Blueprint validation
      run: |
        echo "üìã Validating blueprints..."
        for blueprint in blueprints/*/blueprint.yaml; do
          if [ -f "$blueprint" ]; then
            echo "Checking $blueprint"
            # Basic YAML syntax check
            node -e "
              const yaml = require('js-yaml');
              const fs = require('fs');
              try {
                const content = fs.readFileSync('$blueprint', 'utf8');
                const parsed = yaml.load(content);
                if (!parsed.id || !parsed.version) {
                  throw new Error('Missing required fields: id, version');
                }
                console.log('‚úÖ Valid blueprint: ' + parsed.id);
              } catch (error) {
                console.error('‚ùå Invalid blueprint: $blueprint');
                console.error(error.message);
                process.exit(1);
              }
            "
          fi
        done
        
    - name: TypeScript compilation check
      run: |
        echo "üîß Checking TypeScript compilation..."
        npx tsc --noEmit || echo "‚ö†Ô∏è TypeScript issues detected (non-blocking)"
        
    - name: CLI smoke tests
      run: |
        echo "üß™ Running CLI smoke tests..."
        
        # Test core CLI commands exist and respond
        timeout 10s node cli/aegis-orient.ts --help > /dev/null || echo "‚ùå aegis-orient failed"
        timeout 10s node cli/aegis-conductor.ts --help > /dev/null || echo "‚ùå aegis-conductor failed"  
        timeout 10s node cli/aegis-setup.ts --help > /dev/null || echo "‚ùå aegis-setup failed"
        
        echo "‚úÖ CLI smoke tests completed"
        
    - name: Essential file checks
      run: |
        echo "üìÅ Checking essential files..."
        
        # Core files that must exist
        essential_files=(
          "VERSION"
          "CONSTITUTION.md"
          "package.json"
          "framework/framework-core-v$(cat VERSION).md"
        )
        
        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing essential file: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done
        
    - name: Quick telemetry test
      run: |
        echo "üìä Testing telemetry system..."
        
        # Run a quick evaluation to test telemetry
        timeout 30s node cli/aegis-eval.ts run eval-feat-user-auth > /dev/null || echo "‚ö†Ô∏è Evaluation test timed out (expected)"
        
        # Check if telemetry files were created
        if [ -d ".aegis/telemetry" ]; then
          echo "‚úÖ Telemetry system functional"
        else
          echo "‚ùå Telemetry system not working"
          exit 1
        fi
