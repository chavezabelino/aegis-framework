{
  "name": "aegis-framework",
  "version": "2.5.0",
  "description": "AI Agent Development Governance Framework - Constitutional governance for consistent, compliant AI agent code generation with real-time enforcement and quality assurance",
  "type": "module",
  "scripts": {
    "plan:gate:mvp": "node scripts/ci/plan-gate.mjs MVP-Fix ./PLAN.md 2",
    "plan:gate:surgical": "node scripts/ci/plan-gate.mjs Surgical-Refactor ./PLAN.md 5",
    "plan:gate:systemic": "node scripts/ci/plan-gate.mjs Systemic-Change ./PLAN.md 10",
    "plan:critic": "node tools/planner-critic.ts",
    "plan:validate": "node tools/validate-blueprint.ts patterns/planning-optimization/blueprint.yaml",
    "plan:auto": "node tools/auto-plan-detector.ts",
    "vibe": "node tools/auto-plan-detector.ts",
    "mcp:start": "node tools/mcp-aegis-server.ts",
    "aegis:planning": "node cli/aegis-planning.ts",
    "validate:planning": "node scripts/validate-planning-system.ts",
    "validate:blueprint": "node tools/validate-blueprint.ts",
    "check:provenance": "node tools/check-provenance.js",
    "check:paths": "node tools/check-paths.js",
    "check:version": "node tools/check-version-sync.js",
    "validate": "bun tools/validate-constitution.ts",
    "validate:templates": "node tools/validate-template-quality.cjs",
    "validate:fidelity": "node tools/validate-output-fidelity.cjs",
    "validate:versions": "node tools/validate-version-consistency.cjs",
    "validate:all": "bun run validate && bun run validate:templates && bun run validate:fidelity && bun run validate:versions && bun run validate:package-manager",
    "conductor": "bun cli/aegis-conductor.ts",
    "check": "bun cli/aegis-conductor.ts check",
    "init": "bun cli/aegis-conductor.ts init",
    "docs": "bun cli/aegis-docs.ts",
    "docs:manifesto": "bun cli/aegis-docs.ts manifesto",
    "docs:principles": "bun cli/aegis-docs.ts principles",
    "docs:search": "bun cli/aegis-docs.ts search",
    "analyze-patterns": "bun framework/learning/pattern-recognition-engine.ts",
    "learn": "bun run analyze-patterns",
    "predict": "bun framework/learning/predictive-enforcement.ts",
    "changelog": "bun framework/learning/intelligent-changelog.ts",
    "changelog-analyze": "bun framework/learning/intelligent-changelog.ts",
    "changelog-update": "bun tools/auto-update-changelog.ts",
    "version-plan": "bun run changelog",
    "amendment": "bun cli/amendment-cli.ts",
    "democracy": "bun framework/governance/democratic-amendment-engine.ts",
    "governance": "bun run amendment",
    "heal": "bun framework/healing/self-healing-blueprint-engine.ts",
    "observe": "bun framework/observability/advanced-observability-engine.ts",
    "cross-learn": "bun framework/learning/cross-framework-learning-system.ts",
    "detect-evolution": "bun cli/detect-evolution-stories.cjs",
    "evolution-story": "bun cli/generate-evolution-story.cjs",
    "analyze-copilot": "bun -e \"require('./tools/copilot-integration.ts').analyzeCopilotInteractions(1)\"",
    "pre-commit-check": "bun cli/detect-evolution-stories.cjs",
    "dev-scan": "watch \"bun run detect-evolution\" docs/ framework/ tools/ --interval=30",
    "setup-proactive": "bash tools/setup-proactive-detection.sh",
    "build": "bun run validate:all && bun run build:vite",
    "build:vite": "vite build --config vite.cli.config.ts",
    "build:esm": "vite build --config vite.cli.config.ts",
    "dev": "vite",
    "preview": "vite preview",
    "type-check": "tsc --noEmit",
    "cursor:start": "bun run cli/cursor-realtime-cli.ts start",
    "cursor:stop": "bun run cli/cursor-realtime-cli.ts stop",
    "cursor:status": "bun run cli/cursor-realtime-cli.ts status",
    "cursor:monitor": "bun run cli/cursor-realtime-cli.ts monitor",
    "cursor:stats": "bun run cli/cursor-realtime-cli.ts stats",
    "cursor:feedback": "bun run cli/cursor-realtime-cli.ts feedback",
    "cursor:patterns": "bun run cli/cursor-realtime-cli.ts patterns",
    "cursor:test": "bun run cli/cursor-realtime-cli.ts test",
    "bun:dev": "bun --watch cli/cursor-realtime-cli.ts start",
    "bun:test": "bun test",
    "bun:install": "bun install",
    "framework:dev": "bun --watch cli/cursor-realtime-cli.ts start",
    "framework:test": "bun run cursor:test",
    "framework:build": "bun run build:vite",
    "framework:validate": "bun run validate",
    "build:package": "bun scripts/build-package.ts",
    "build:cli": "bun scripts/build-standalone-cli.ts",
    "build:docker": "docker build -t aegis-framework/cli:$(cat VERSION) .",
    "release": "bun scripts/release.ts",
    "release:patch": "bun run release -- patch",
    "release:minor": "bun run release -- minor",
    "release:major": "bun run release -- major",
    "version:sync": "bun scripts/sync-version.ts",
    "package:validate": "bun scripts/validate-package.ts",
    "validate:package-manager": "bun tools/validate-package-manager-consistency.ts",
    "fix:package-manager": "bun tools/fix-package-manager-consistency.ts",
    "lint:markdown": "npx markdownlint '**/*.md' --config .markdownlint.json --ignore-path .gitignore",
    "lint:markdown:fix": "npx markdownlint '**/*.md' --config .markdownlint.json --fix --ignore-path .gitignore",
    "audit:markdown": "tsx tools/audit-markdown.ts",
    "fix:markdown": "tsx tools/fix-markdown.ts",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "format:markdown": "prettier --write '**/*.md' '**/*.mdx'",
    "format:markdown:check": "prettier --check '**/*.md' '**/*.mdx'",
    "format:markdown:comprehensive": "tsx tools/format-markdown.ts",
    "types": "tsc -p tsconfig.json --noEmit",
    "lint": "eslint .",
    "test:unit": "vitest run --coverage",
    "test:e2e": "playwright test",
    "mutate": "echo 'Mutation testing not configured yet'",
    "deps:scan": "knip --reporter compact && echo 'ts-prune not available' && depcheck",
    "sec:scan": "echo 'Semgrep not configured yet' && npm run dep:review",
    "dep:review": "npx audit-ci --moderate",
    "aegis:compliance": "tsx tools/constitutional-compliance-enforcer.ts",
    "aegis:compliance:json": "tsx tools/constitutional-compliance-enforcer.ts --json",
    "test:compliance": "vitest run -t enforcer.smoke.test.ts",
    "aegis:provenance:add": "tsx ./tools/aegis-provenance.ts add",
    "aegis:provenance:verify": "tsx ./tools/aegis-provenance.ts verify",
    "aegis:waivers:verify": "tsx ./tools/aegis-waivers-verify.ts",
    "quality": "node .aegis/quality/run-local.cjs",
    "quality:ci": "node .aegis/quality/run-ci.cjs",
    "types:full": "pnpm types > .aegis/tmp/types.txt 2>&1",
    "types:report": "bash scripts/types-report.sh",
    "types:baseline": "bash scripts/types-baseline-guard.sh",
    "lint:fix": "eslint . --fix",
    "test": "vitest run",
    "coverage": "vitest run --coverage",
    "dep:audit:build": "node scripts/audit-allowlist-build.cjs",
    "dep:audit": "pnpm run dep:audit:build && audit-ci --package-manager npm --config audit-ci.generated.json"
  },
  "lint-staged": {
    "*.md": [
      "prettier --write",
      "markdownlint --fix --config .markdownlint.json --ignore-path .gitignore"
    ],
    "*.mdx": [
      "prettier --write",
      "markdownlint --fix --config .markdownlint.json --ignore-path .gitignore"
    ]
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^0.5.0",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/auto-instrumentations-node": "^0.62.0",
    "@opentelemetry/exporter-jaeger": "^2.0.1",
    "@opentelemetry/exporter-otlp-http": "^0.26.0",
    "@opentelemetry/exporter-trace-otlp-http": "^0.203.0",
    "@opentelemetry/resources": "^2.0.1",
    "@opentelemetry/sdk-node": "^0.203.0",
    "@opentelemetry/sdk-trace-node": "^2.0.1",
    "@opentelemetry/semantic-conventions": "^1.36.0",
    "commander": "^14.0.0",
    "ejs": "^3.1.10",
    "inquirer": "^12.9.0",
    "js-yaml": "^4.1.0",
    "langfuse": "^3.38.4",
    "ora": "^8.2.0",
    "yargs": "^18.0.0",
    "zod": "^4.0.17"
  },
  "devDependencies": {
    "@playwright/test": "^1.54.2",
    "@types/ejs": "^3.1.5",
    "@types/jest": "^30.0.0",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^22.17.1",
    "@typescript-eslint/eslint-plugin": "^6.13.0",
    "@typescript-eslint/parser": "^6.13.0",
    "@vitejs/plugin-react": "^5.0.0",
    "@vitest/coverage-v8": "^2.1.9",
    "audit-ci": "^7.1.0",
    "bun": "^1.2.19",
    "c8": "^9.1.0",
    "depcheck": "^1.4.7",
    "eslint": "^8.55.0",
    "eslint-plugin-unicorn": "^55.0.0",
    "globby": "^14.1.0",
    "jest": "^30.0.5",
    "knip": "^5.62.0",
    "lint-staged": "^16.1.5",
    "markdownlint-cli": "^0.45.0",
    "markdownlint-cli2": "^0.18.1",
    "playwright": "^1.54.2",
    "prettier": "^3.6.2",
    "semver": "^7.7.2",
    "sha256-uint8array": "^0.10.7",
    "ts-jest": "^29.4.1",
    "ts-node": "^10.9.2",
    "tsx": "^4.20.3",
    "typescript": "^5.3.0",
    "vite": "^7.1.1",
    "vitest": "^2.1.9"
  },
  "keywords": [
    "ai",
    "framework",
    "blueprint",
    "governance",
    "constitutional",
    "self-healing",
    "genai-os",
    "constitutional-ai",
    "ai-governance",
    "genai-operating-system",
    "ai-infrastructure",
    "constitutional-computing",
    "drift-detection",
    "evolution-stories",
    "ai-native-engineering",
    "intelligence-governance",
    "probabilistic-systems",
    "ai-reliability",
    "systematic-ai",
    "production-ai"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/chavezabelino/aegis-framework.git"
  },
  "homepage": "https://github.com/chavezabelino/aegis-framework#readme",
  "bugs": {
    "url": "https://github.com/chavezabelino/aegis-framework/issues"
  },
  "author": {
    "name": "Aegis Framework Contributors",
    "url": "https://github.com/chavezabelino/aegis-framework/graphs/contributors"
  },
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/chavezabelino"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
