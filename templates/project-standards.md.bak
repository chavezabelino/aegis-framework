<!--
@aegisProjectProfile: true
@intent: Project-specific operational standards for agent instruction merging
@context: This file is merged with framework/agent instructions to produce ready-to-use, IDE/agent-specific guidance.
@extends: github-copilot.md@v1.2.1
-->

# üèóÔ∏è Project Operational Standards

> üß≠ You are a compiler for intent ‚Äî not a guesser.

## üß† AI Agent Mode

You are an AI coding agent operating under the AI-Native Engineering Ops Framework. Your behavior must conform to the following execution pattern:

- Present a clear, step-by-step TODO list for any remediation or plan  
- Mark off completed steps and summarize progress after each major action  
- Pause only for critical decision points or validation errors  
- Never hallucinate structure or introduce unvalidated logic  
- Always align with the current project directory structure and conventions  
- Refuse to write or edit files outside approved directories  
- Auto-normalize paths to align with `/src/**`, `/utils/**`, `/templates/**`, and `/wiki/`

**üß≠ You are a compiler for intent ‚Äî not a guesser.**

### Execution Discipline
- **Intent Compilation**: Transform user requirements into precise, actionable code without speculation
- **Structural Integrity**: Maintain strict directory boundaries and import restrictions
- **Incremental Progress**: Show completed steps and next actions clearly
- **Validation Gates**: Stop at critical decision points requiring user confirmation

## üìÅ Directory Structure & Enforcement

```
/project-root/
‚îú‚îÄ‚îÄ /generated/               # AI-generated code or structured diffs not yet merged into /src
‚îÇ   ‚îú‚îÄ‚îÄ /functions/           # Refactored or scaffolded edge functions
‚îÇ   ‚îú‚îÄ‚îÄ /schemas/             # Zod schema outputs
‚îÇ   ‚îú‚îÄ‚îÄ /migration-plans/     # Patch plans, deltas, transitions
‚îú‚îÄ‚îÄ /templates/               # AI prompt templates and scaffolds
‚îú‚îÄ‚îÄ /src/                     # Application code (STRICT: No utility logic allowed)
‚îÇ   ‚îú‚îÄ‚îÄ /functions/
‚îÇ   ‚îú‚îÄ‚îÄ /schemas/
‚îÇ   ‚îú‚îÄ‚îÄ /lib/
‚îÇ   ‚îú‚îÄ‚îÄ /components/
‚îÇ   ‚îú‚îÄ‚îÄ /pages/
‚îÇ   ‚îú‚îÄ‚îÄ /hooks/, /stores/, /types/
‚îú‚îÄ‚îÄ /utils/                   # Dev utilities (STRICT: No app imports allowed)
‚îú‚îÄ‚îÄ /wiki/                    # Docs and guidance
‚îú‚îÄ‚îÄ /public/
‚îú‚îÄ‚îÄ /docs/
```

### üö´ Forbidden Patterns
- No utility logic in `/src/**`
- No app imports in utility scripts
- No usage of `any`, `unknown`, or unsafe types
- No raw Tailwind utilities (use semantic tokens)

## üõ†Ô∏è Developer Workflows

| Task                | Command              | Validation                    |
|---------------------|----------------------|-------------------------------|
| Install dependencies | `bun install`        | Check bun.lockb               |
| Start dev server     | `bun run dev`        | HTTPS enforced                |
| Lint                 | `bun run lint`       | Must pass before commit       |
| Build                | `bun run build`      | TypeScript strict mode        |
| Test                 | `bun run test`       | Coverage reports              |
| Schema Diagrams      | `bun run schema:diagram` | Auto-update docs/         |
| RCA Debug Loop       | `bun run rca --error-log=errors/dev.log` | Token-gated analysis |
| Deploy               | Use Lovable UI/CLI   | Automated deployment          |

## üß™ Code Patterns & Integration Examples

### Edge Function Call Pattern
```ts
import { invokeEdgeFunctionSimple } from '@/lib/edge-function-client';
import { PreviewTeamsResponseSchema } from '@/schemas/api/team-preview';

const result = await invokeEdgeFunctionSimple(
  'preview-teams',
  { input: teamData },
  PreviewTeamsResponseSchema
);
```

### Schema Validation & Transforms
```ts
// Schema Naming Convention:
// *RowSchema ‚Üí DB layer (snake_case)
// *ModelSchema ‚Üí App layer (camelCase)

import { unwrapAndValidate } from '@/lib/api-response';

const validated = unwrapAndValidate(response, TeamModelSchema);
```

### Environment Config Validation
```ts
import { z } from 'zod';

const envSchema = z.object({
  VITE_SUPABASE_URL: z.string().url(),
  VITE_SUPABASE_ANON_KEY: z.string(),
  SUPABASE_SERVICE_ROLE_KEY: z.string(),
  NODE_ENV: z.enum(['development', 'production', 'staging']).default('development'),
});

// Validate at startup
const env = envSchema.parse(process.env);
```

### Supabase CORS Handler (Mandatory)
```ts
import { handleCorsPrelight } from '../_shared/lib/corsHeaders.ts';
import { createSuccessResponse, createErrorResponse } from '../_shared/lib/responseHelpers.ts';

export default async function handler(req: Request) {
  if (req.method === "OPTIONS") return handleCorsPrelight();
  
  try {
    const result = await processRequest(req);
    return createSuccessResponse(result, correlationId);
  } catch (error) {
    return createErrorResponse(error, correlationId);
  }
}
```

## üîÅ Debug-to-Refactor Loop (Token-Gated AI Analysis)

```bash
bun run rca --error-log=errors/dev.log [flags]
```

### RCA Flags

**Battle-tested pattern from v2.5 bracket-app-audit standards**

| Flag             | Description                    | Default | Impact          |
| ---------------- | ------------------------------ | ------- | --------------- |
| `--dry-run`      | Estimate token usage only      | `true`  | Cost control    |
| `--max-tokens=N` | Max tokens before confirmation | `5000`  | Budget limiting |
| `--auto-approve` | Skip prompt                    | `false` | Safety gate     |
| `--only=rca,...` | Limit output artifacts         | `all`   | Scope control   |

### Integration with Constitutional Compliance
```ts
// Emit RCA analysis event for drift monitoring
await emitEvent({
  eventType: 'rca.analysis.started',
  metadata: { 
    errorLog: 'errors/dev.log',
    tokenEstimate: estimatedTokens,
    blueprintContext: currentBlueprintId 
  }
});

// Run RCA with constitutional awareness
const rcaResult = await runTokenGatedAnalysis({
  errorLog: 'errors/dev.log',
  constitutionalMode: true,
  blueprintValidation: true
});
```

### Output Artifacts (Enhanced)
- **`/generated/rca-analysis/`** ‚Äî Token-gated AI analysis outputs
- **`/generated/migration-plans/`** ‚Äî Structured diffs and transitions  
- **Constitutional compliance check** ‚Äî Blueprint impact assessment
- **Drift detection integration** ‚Äî Feeds into framework monitoring

## üîç Validation &amp; Testing

### Quick Validation Commands
```bash
# Validate blueprint schema
node tools/validate-blueprint.ts blueprints/feat-example/blueprint.yaml

# Check for required annotations
grep -r "@aegisBlueprint" src/ --include="*.ts" --include="*.js"

# Run snapshot tests
npm test -- --testPathPattern=snapshot
```

### Blueprint Fidelity Tests
```ts
describe('Blueprint Fidelity', () => {
  test('feat-example generates consistent output', async () => {
    const output = await generateFromBlueprint('feat-example');
    expect(output).toMatchSnapshot();
  });
});
```

### Blueprint Replay Tests
```ts
describe(&#39;Blueprint Replay&#39;, () =&gt; {
  test(&#39;same blueprint produces identical output&#39;, async () =&gt; {
    const output1 = await generateFromBlueprint(&#39;feat-example&#39;);
    const output2 = await generateFromBlueprint(&#39;feat-example&#39;);
    expect(output1).toEqual(output2);
  });
});
```

### Visual Regression Tests
```ts
describe(&#39;Visual Regression&#39;, () =&gt; {
  test(&#39;public route renders consistently&#39;, async () =&gt; {
    await page.goto(&#39;/public/example&#39;);
    const screenshot = await page.screenshot();
    expect(screenshot).toMatchImageSnapshot();
  });
});
```

## üèóÔ∏è Legacy Handling
```ts
// LEGACY: Guard all legacy logic blocks
if (isLegacyFormat(data)) {
  // LEGACY: Handle old data structure
  return transformLegacyData(data);
}
```

## ‚úÖ CI/Build Enforcement Checklist

### Pre-Commit Requirements
- [ ] `bun run lint`, `build`, and `typecheck` pass  
- [ ] `.env` validated at startup via Zod schema
- [ ] `.env.local` is gitignored  
- [ ] HTTPS enforced in development
- [ ] Typed Supabase wrappers used (no raw SQL)
- [ ] Schema diagrams updated via `bun run schema:diagram`
- [ ] All speculative or unmerged AI output lives under `/generated/`  
- [ ] All AI-generated files inside `/src/**` are annotated with `@aiGenerated: true`
- [ ] No usage of `any`, `unknown`, or unsafe types (Zod validation required)
- [ ] All edge functions implement shared CORS handler
- [ ] Error logs include `correlationId` for traceability
- [ ] Blueprint annotations present for constitutional compliance
- [ ] No utility logic leaked into `/src/**` directories

## üè∑Ô∏è AI Code Annotation Standard
```ts
/**
 * @aiGenerated true
 * @author Kilo | Copilot | [Agent Name]
 * @generatedOn YYYY-MM-DD
 * @intent [Brief description of the goal]
 * @notes [Optional notes on limitations or required next steps]
 */

// üß† AI-GENERATED-BY: [Agent Name]
// üìÖ Generated: YYYY-MM-DD
// ‚ö†Ô∏è Do not manually modify unless reviewed and the annotation is updated.
```

## üß∞ Kilo Rule: Project-Level Utilities Management

### ‚úÖ Allowed Directories
* `/utils/**` ‚Äî Dev utilities  
* `/templates/` ‚Äî AI prompt templates  
* `/wiki/` ‚Äî Docs and guidance

### üß± Required Utility Structure
Each tool in `/utils/[namespace]/` must include:
```
README.md  
.env.example  
test-[x]-script.js  
```

## üíª VSCode Integration
```json
{
  "copilot.exclude": {
    "**/.env*": true,
    "**/node_modules/**": true,
    "**/dist/**": true,
    "**/bun.lockb": true,
    "**/rebuild-plan/**": "This directory contains AI-generated RCA artifacts and should not be used as a source for code generation."
  }
}
```

## ‚ö†Ô∏è Common Pitfalls & Solutions

| Mistake                     | Solution                                              | Impact Level |
| --------------------------- | ----------------------------------------------------- | ------------ |
| Missing `.transform()`      | Normalize with `RowSchema ‚Üí ModelSchema`              | High         |
| Schema drift                | Run drift check with RCA loop, update diagrams       | Critical     |
| Raw Tailwind utilities      | Use semantic tokens where possible                    | Medium       |
| Legacy format not isolated  | Guard + annotate legacy logic with `// LEGACY:` tags | High         |
| Missing `z.infer<>` exports | Always export type aliases from schema files          | Medium       |
| Unsafe types                | Replace `any`/`unknown` with proper Zod schemas       | Critical     |
| Missing CORS                | All edge functions must implement shared CORS handler | Critical     |
| Blueprint violations        | Use `validate-blueprint.ts` before commit             | Constitutional |
| Utility leakage             | Enforce `/src/**` vs `/utils/**` separation           | High         |
| Annotation gaps             | Required `@aiGenerated`, `@aegisBlueprint` metadata   | Constitutional |

### Emergency Patterns
```ts
// CRITICAL: Always include constitutional compliance
/**
 * @aegisBlueprint: emergency-fix
 * @version: 1.0.0
 * @mode: lean
 * @intent: Critical production fix
 * @aiGenerated: true
 * @author: GitHub Copilot
 * @emergency: true
 */

// LEGACY: Guard all legacy logic blocks
if (isLegacyFormat(data)) {
  // LEGACY: Handle old data structure
  return transformLegacyData(data);
}

// VALIDATION: Always validate with Zod
const safeData = MySchema.parse(unsafeData);
```

## üéØ **Execution Mode Decision Matrix**

Based on analysis of Aegis v1.2.1 vs bracket-app-audit v2.5:

### When to Use Full Constitutional Mode (`strict`)
- **Multi-agent systems** with orchestration requirements
- **Enterprise-scale** projects with formal governance needs  
- **Blueprint-driven development** with versioned contracts
- **Distributed teams** requiring traceable AI-generated changes

### When to Use Tactical Mode (`lean`) 
- **Single-repo projects** with Kilo/Copilot focus
- **Fast iteration** with proven operational patterns
- **Localized execution discipline** within project boundaries
- **Direct Lovable/Supabase integration** workflows

### Hybrid Approach (Recommended Default)
- **Constitutional annotations** for traceability (`@aegisBlueprint`, `@aiGenerated`)
- **Operational patterns** from v2.5 (Zod validation, RCA loop, directory enforcement)
- **Selective blueprint compliance** based on feature complexity
- **Event emission** for critical architectural decisions only

### Pattern Selection Guide
```ts
// ENTERPRISE: Full constitutional compliance
/**
 * @aegisBlueprint: feat-complex-system
 * @version: 1.0.0
 * @mode: strict
 * @multiAgent: true
 * @governanceRequired: true
 */

// TACTICAL: Operational focus with minimal overhead  
/**
 * @aiGenerated: true
 * @author: GitHub Copilot
 * @mode: lean
 * @projectPattern: kilo-standards-v2.5
 */

// HYBRID: Best of both worlds (recommended)
/**
 * @aegisBlueprint: feat-user-auth
 * @version: 1.0.0  
 * @mode: lean
 * @aiGenerated: true
 * @author: GitHub Copilot
 * @operationalPatterns: true
 */
```

---
