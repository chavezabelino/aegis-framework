/**
 * @aegisFrameworkVersion 2.3.0-alpha-dev
 * @intent Configuration schema for team-specific Aegis Framework behavior
 * @context Support three-tier configuration system: Core, Required, Optional
 */

import { z } from 'zod';

// Configuration profiles
const ConfigurationProfile = z.enum(['strict', 'balanced', 'minimal']);

// Enforcement modes
const EnforcementMode = z.enum(['strict', 'guided', 'advisory']);

// Severity levels
const SeverityLevel = z.enum(['low', 'medium', 'high', 'critical']);

// Update intervals
const UpdateInterval = z.enum(['hourly', 'daily', 'weekly']);

// Changelog formats
const ChangelogFormat = z.enum(['constitutional', 'standard', 'custom']);

// Core configuration schema (always enabled, cannot be disabled)
const CoreConfigSchema = z.object({
  blueprintValidation: z.literal(true),
  agentDriftPrevention: z.literal(true),
  intentEnforcement: z.literal(true),
  versionConsistency: z.literal(true)
});

// Required features configuration (on by default, team can override)
const RequiredConfigSchema = z.object({
  evolutionStoryDetection: z.object({
    enabled: z.boolean().default(true),
    autoGenerate: z.boolean().default(false),
    triggerThreshold: SeverityLevel.default('medium')
  }),
  
  constitutionalEnforcement: z.object({
    mode: EnforcementMode.default('strict'),
    blocking: z.boolean().default(true),
    autoCorrection: z.boolean().default(true)
  }),
  
  precommitHooks: z.object({
    enabled: z.boolean().default(true),
    evolutionDetection: z.boolean().default(true),
    constitutionalValidation: z.boolean().default(true)
  }),
  
  annotations: z.object({
    required: z.boolean().default(true),
    coverage: z.number().min(0).max(1).default(0.8),
    enforcement: z.enum(['warning', 'error', 'silent']).default('warning')
  }),
  
  templateQuality: z.object({
    validation: z.boolean().default(true),
    encodingChecks: z.boolean().default(true)
  })
});

// Optional features configuration (off by default)
const OptionalConfigSchema = z.object({
  realtimePatternDetection: z.object({
    enabled: z.boolean().default(false),
    sensitivity: SeverityLevel.default('medium')
  }),
  
  autoGeneratedEvolutionStories: z.object({
    enabled: z.boolean().default(false),
    severity: SeverityLevel.default('critical')
  }),
  
  driftMonitoringDashboard: z.object({
    enabled: z.boolean().default(false),
    updateInterval: UpdateInterval.default('daily')
  }),
  
  automatedChangelog: z.object({
    enabled: z.boolean().default(false),
    format: ChangelogFormat.default('constitutional')
  }),
  
  predictiveEnforcement: z.object({
    enabled: z.boolean().default(false),
    confidence: z.number().min(0).max(1).default(0.8),
    learning: z.boolean().default(true)
  })
});

// Team override configuration (requires constitutional acknowledgment)
const OverrideConfigSchema = z.object({
  constitutionalAcknowledgment: z.string().regex(/^\d{4}-\d{2}-\d{2}$/), // YYYY-MM-DD
  reason: z.string().min(10),
  approvedBy: z.string().email(),
  overrideExpiry: z.string().regex(/^\d{4}-\d{2}-\d{2}$/), // YYYY-MM-DD
  
  // Specific overrides (optional, when teams need to disable required features)
  evolutionStoryDetection: z.boolean().optional(),
  constitutionalEnforcementMode: EnforcementMode.optional(),
  precommitHooksEnabled: z.boolean().optional(),
  annotationsRequired: z.boolean().optional()
});

// Team identification
const TeamConfigSchema = z.object({
  name: z.string().min(1),
  profile: ConfigurationProfile.default('balanced'),
  constitutionalAcknowledgment: z.string().regex(/^\d{4}-\d{2}-\d{2}$/).optional()
});

// Complete configuration schema
export const AegisFrameworkConfigSchema = z.object({
  team: TeamConfigSchema,
  core: CoreConfigSchema,
  required: RequiredConfigSchema,
  optional: OptionalConfigSchema,
  overrides: OverrideConfigSchema.optional()
});

// Configuration profile templates (partial configs)
export const ConfigurationProfiles = {
  strict: {
    required: {
      evolutionStoryDetection: { enabled: true, autoGenerate: true },
      constitutionalEnforcement: { mode: 'strict' as const, blocking: true },
      precommitHooks: { enabled: true },
      annotations: { required: true, enforcement: 'error' as const }
    },
    optional: {
      realtimePatternDetection: { enabled: true },
      autoGeneratedEvolutionStories: { enabled: true },
      driftMonitoringDashboard: { enabled: true }
    }
  },
  
  balanced: {
    required: {
      evolutionStoryDetection: { enabled: true, autoGenerate: false },
      constitutionalEnforcement: { mode: 'guided' as const, blocking: true },
      precommitHooks: { enabled: true },
      annotations: { required: true, enforcement: 'warning' as const }
    },
    optional: {
      realtimePatternDetection: { enabled: false },
      autoGeneratedEvolutionStories: { enabled: false },
      driftMonitoringDashboard: { enabled: false }
    }
  },
  
  minimal: {
    required: {
      evolutionStoryDetection: { enabled: false }, // Requires override
      constitutionalEnforcement: { mode: 'advisory' as const, blocking: false }, // Requires override
      precommitHooks: { enabled: false }, // Requires override
      annotations: { required: false, enforcement: 'silent' as const } // Requires override
    },
    optional: {
      // All disabled by default
      realtimePatternDetection: { enabled: false },
      autoGeneratedEvolutionStories: { enabled: false },
      driftMonitoringDashboard: { enabled: false },
      automatedChangelog: { enabled: false },
      predictiveEnforcement: { enabled: false }
    }
  }
};

// Type exports
export type AegisFrameworkConfig = z.infer<typeof AegisFrameworkConfigSchema>;
export type ConfigurationProfileType = z.infer<typeof ConfigurationProfile>;
export type EnforcementMode = z.infer<typeof EnforcementMode>;

// Validation functions
export function validateConfig(config: unknown): AegisFrameworkConfig {
  return AegisFrameworkConfigSchema.parse(config);
}

export function getProfileTemplate(profile: ConfigurationProfileType) {
  return ConfigurationProfiles[profile];
}

// Configuration validation with constitutional compliance
export function validateConstitutionalCompliance(config: AegisFrameworkConfig): {
  valid: boolean;
  violations: string[];
  warnings: string[];
} {
  const violations: string[] = [];
  const warnings: string[] = [];

  // Check if minimal profile overrides have constitutional acknowledgment
  if (config.team.profile === 'minimal') {
    if (!config.overrides?.constitutionalAcknowledgment) {
      violations.push('Minimal profile requires constitutional acknowledgment for overrides');
    }
    
    if (!config.required.evolutionStoryDetection.enabled) {
      warnings.push('Evolution story detection disabled - framework learning may be reduced');
    }
    
    if (config.required.constitutionalEnforcement.mode === 'advisory') {
      warnings.push('Constitutional enforcement in advisory mode - violations may accumulate');
    }
  }

  // Check override expiry
  if (config.overrides?.overrideExpiry) {
    const expiry = new Date(config.overrides.overrideExpiry);
    const now = new Date();
    const maxDuration = new Date(now.getTime() + (4 * 30 * 24 * 60 * 60 * 1000)); // 4 months
    
    if (expiry > maxDuration) {
      violations.push('Override expiry exceeds maximum 4-month duration');
    }
    
    if (expiry < now) {
      violations.push('Override has expired and must be renewed');
    }
  }

  // Check required features are not disabled without acknowledgment
  const requiresAcknowledgment = [
    !config.required.evolutionStoryDetection.enabled,
    !config.required.precommitHooks.enabled,
    !config.required.annotations.required,
    config.required.constitutionalEnforcement.mode === 'advisory'
  ];

  if (requiresAcknowledgment.some(Boolean) && !config.overrides?.constitutionalAcknowledgment) {
    violations.push('Disabling required features requires constitutional acknowledgment');
  }

  return {
    valid: violations.length === 0,
    violations,
    warnings
  };
}

// Configuration merger for applying overrides
export function mergeConfigWithOverrides(
  baseConfig: AegisFrameworkConfig,
  overrides: Partial<AegisFrameworkConfig>
): AegisFrameworkConfig {
  return {
    ...baseConfig,
    ...overrides,
    required: {
      ...baseConfig.required,
      ...overrides.required
    },
    optional: {
      ...baseConfig.optional,
      ...overrides.optional
    }
  };
}
