# .cursorrules

rules:
  - All AI-generated code must comply with the Aegis Framework Constitution defined in `CONSTITUTION.md`
  - Detect and respond to real-time evolution prompts such as:
      - "does this break", "will this cause", "runtime failures"
      - "assess the pitfall", "enhance the framework", "guard against"
      - "should we document somehow", "systematic way"
      - "field-driven", "eating dog food", "real-world usage"
  - Automatically trigger `captureCursorContext()` with the current prompt and workspace root on evolution pattern match
  - Annotate all generated files using the following format:
      - `@aegisBlueprint`, `@version`, `@mode`, `@intent`, `@context`
  - Only generate code based on a defined `blueprint.yaml` under `blueprints/*`
  - Blueprint IDs must be referenced in any generated code files
  - Include observability events, fallback UX, and contract-defined error states as required by blueprint rules
  - Do not generate or suggest any code outside the scope of a defined blueprint
  - All outputs must match the structure defined in the active adapter and follow its execution mode (`lean`, `strict`, or `generative`)
  - Respect semantic versioning in all changes; use version defined in the root `VERSION` file
  - Store AI-generated outputs under:
      - `output.lean.json` for minimal
      - `output.strict.json` for compliant
      - `output.full.json` for creative
  - Validate all new or modified blueprints using:
      - `node cli/init-blueprint.ts <name>`
      - `node tools/validate-blueprint.ts <path>`
  - Enforce file organization:
      - Framework in `framework/`
      - Blueprints in `blueprints/`
      - Adapters in `adapters/`
      - Scripts in `tools/`
  - Run visual regression tests for any public-facing route or layout
  - Constitutionally disallow unannotated or non-deterministic AI output
  - Never bypass blueprint primacy — no generation outside defined schema

# Cursor-Specific Real-Time Evolution Detection
cursor_integration:
  - Import and use `captureCursorContext()` from tools/cursor-integration
  - Analyze conversation context for Cursor-specific evolution triggers
  - Save conversation logs to `.aegis/cursor-feedback/` for pattern recognition
  - Auto-generate critical evolution stories for constitutional insights
  - Provide visual feedback for real-time editing concerns

# Real-Time Response Guidelines
response_patterns:
  - When users express breaking change concerns → Acknowledge framework protections
  - When users identify framework gaps → Note capture for constitutional evolution
  - When users need documentation → Mention automatic evolution story system
  - When users report field friction → Emphasize experience feeds framework learning
  - When users request interface improvements → Log for Cursor integration consideration

project: aegis-framework
agent: cursor
coordination: true
real_time_detection: true
